{"ast":null,"code":"var _jsxFileName = \"/mnt/440C056A0C0557F6/Courses/React/06 - Styling React Components/32363530-01-starting-project/01-starting-project/src/components/UI/Button/Button.js\";\n// import styled from \"styled-components\";\nimport React from \"react\"; // If I have to use CSS Modules, I have to import the css file a little different\n// In styled, we have something known as button, and this `` are used to paas something.\n// Tagged template literal\n// const Button = styled.button`\n// \twidth: 100%;\n// \tfont: inherit;\n// \tpadding: 0.5rem 1.5rem;\n// \tborder: 1px solid #8b005d;\n// \tcolor: white;\n// \tbackground: #8b005d;\n// \tbox-shadow: 0 0 4px rgba(0, 0, 0, 0.26);\n// \tcursor: pointer;\n// \t// We will take use of media-query\n// \t// What we want to do is that, in case of laptop, or big screen devices we want simple button width,\n// \t// otherwise, we want full width button\n// \t@media (min-width: 768px) {\n// \t\twidth: auto;\n// \t}\n// \t// What above line does is that, if our condition which is (min-width: 768px) is met, then our width will be set to \"auto\", otherwise, width will be 100%\n// \t// Instead of .button:focus, we use -> &:focus\n// \t&:focus {\n// \t\toutline: none;\n// \t}\n// \t&:hover,\n// \t.button:active {\n// \t\tbackground: #ac0e77;\n// \t\tborder-color: #ac0e77;\n// \t\tbox-shadow: 0 0 8px rgba(0, 0, 0, 0.26);\n// \t}\n// `;\n// This above button will work exactly the same as the below button\n\n/*\nstyled.button`` -> this will ultimately provide us the button tags with styling applied using the the data we have provided in between ``\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: props.type,\n    className: \"button\",\n    onClick: props.onClick,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }, this);\n}; // If we are returning our styled component directly, then there's no need to write props.children or something like that\n\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"names":["React","Button","props","type","onClick","children"],"sources":["/mnt/440C056A0C0557F6/Courses/React/06 - Styling React Components/32363530-01-starting-project/01-starting-project/src/components/UI/Button/Button.js"],"sourcesContent":["// import styled from \"styled-components\";\n\nimport React from \"react\";\n\n// If I have to use CSS Modules, I have to import the css file a little different\n\n// In styled, we have something known as button, and this `` are used to paas something.\n// Tagged template literal\n// const Button = styled.button`\n// \twidth: 100%;\n// \tfont: inherit;\n// \tpadding: 0.5rem 1.5rem;\n// \tborder: 1px solid #8b005d;\n// \tcolor: white;\n// \tbackground: #8b005d;\n// \tbox-shadow: 0 0 4px rgba(0, 0, 0, 0.26);\n// \tcursor: pointer;\n\n// \t// We will take use of media-query\n// \t// What we want to do is that, in case of laptop, or big screen devices we want simple button width,\n// \t// otherwise, we want full width button\n// \t@media (min-width: 768px) {\n// \t\twidth: auto;\n// \t}\n// \t// What above line does is that, if our condition which is (min-width: 768px) is met, then our width will be set to \"auto\", otherwise, width will be 100%\n\n// \t// Instead of .button:focus, we use -> &:focus\n// \t&:focus {\n// \t\toutline: none;\n// \t}\n\n// \t&:hover,\n// \t.button:active {\n// \t\tbackground: #ac0e77;\n// \t\tborder-color: #ac0e77;\n// \t\tbox-shadow: 0 0 8px rgba(0, 0, 0, 0.26);\n// \t}\n// `;\n// This above button will work exactly the same as the below button\n\n/*\nstyled.button`` -> this will ultimately provide us the button tags with styling applied using the the data we have provided in between ``\n*/\n\nconst Button = (props) => {\n\treturn (\n\t\t<button type={props.type} className=\"button\" onClick={props.onClick}>\n\t\t\t{props.children}\n\t\t</button>\n\t);\n};\n\n// If we are returning our styled component directly, then there's no need to write props.children or something like that\n\nexport default Button;\n"],"mappings":";AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;EACzB,oBACC;IAAQ,IAAI,EAAEA,KAAK,CAACC,IAApB;IAA0B,SAAS,EAAC,QAApC;IAA6C,OAAO,EAAED,KAAK,CAACE,OAA5D;IAAA,UACEF,KAAK,CAACG;EADR;IAAA;IAAA;IAAA;EAAA,QADD;AAKA,CAND,C,CAQA;;;KARMJ,M;AAUN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}